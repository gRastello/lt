#!/bin/bash

# aliases
tmp_deck="/tmp/tmpdeck"
today=$(date +"%m-%d-%Y")
resets="n"

# studying functions
study_deck() {
	# shuffle deck
	shuf $deck -o $tmp_deck
	mv $tmp_deck $deck

	# loop through items
	while read item; do
	    study_item "$item"
	done < $deck

	# update the deck from the temporary deck
	mv $tmp_deck $deck

	# say goodbye
	[[ $resets == "y" ]] && echo -e "\e[1m\e[33mWarning\e[0m: some flashcards have been resetted because of poor perfomances so you should study the deck again"
}

study_item() {
	# set up variables
	IFS=';' read -a q <<< "$1"
	question="${q[0]}"
	answer="${q[1]}"
	efactor="${q[2]}"
	date="${q[3]}"
	repetition_number="${q[4]}"
	interval="${q[5]}"

	if [[ $today > $date || $today == $date ]]; then
		# ask the question and get the quality
		echo -e  "\e[1mQUESTION:\e[0m $question"
		read -n 1 -s -r < /dev/tty
		echo -e "\e[1mANSWER:\e[0m   $answer"
		read -n 1 -p "Quality of your answer [0-5]: " quality < /dev/tty
		echo -e "\n"

		# if not one of the above numbers is given change quality to 0
		if [[ $quality != 0 && $quality != 1 && $quality != 2 && $quality != 3 && $quality != 4 && $quality != 5 ]]; then
			quality=0
		fi

		# update the e-factor
		new_efactor=$(echo "$efactor - 0.8 + 0.28 * $quality - 0.02 * $quality * $quality" | bc)
		[[ $(echo "$new_efactor > 2.5" | bc) == 1 ]] && new_efactor="2.5"
		[[ $(echo "$new_efactor < 1.3" | bc) == 1 ]] && new_efactor="1.3"

		# calculate new interval
		if [[ $repetition_number == "0" ]]; then
			new_interval="1";
		else
			new_interval=$(echo "$interval * $new_efactor" | bc)
			new_interval=$(printf "%.0f" $new_interval)
			[[ $new_interval == "0" ]] && new_interval="1"
		fi

		# update the item and store it in a temporary file
		if [[ $(echo "$quality < 3" | bc) == "1" ]]; then
			resets="y"
			echo "$question;$answer;$new_efactor;$today;0;0" >> $tmp_deck
		else
			echo "$question;$answer;$new_efactor;$(date -d "now +$new_interval days" +"%m-%d-%Y");$(echo "$repetition_number + 1" | bc);$new_interval" >> $tmp_deck
		fi
	else
		echo $1 >> $tmp_deck
	fi
}

# cramming functions
cram_deck() {
	# shuffle deck
	shuf $deck -o $tmp_deck
	mv $tmp_deck $deck

	# drill the items
	while read item; do
	    cram_item "$item"
	done < $deck
}

cram_item() {
	# set up variables
	IFS=';' read -a q <<< "$1"
	question="${q[0]}"
	answer="${q[1]}"

	# ask the question and get the quality
	echo -e  "\e[1mQUESTION:\e[0m $question"
	read -n 1 -s -r < /dev/tty
	echo -e "\e[1mANSWER:\e[0m   $answer\n"
}

add_to_deck() {
	read -e -p "$(echo -e "\e[1mQUESTION:\e[0m ")" question
	read -e -p "$(echo -e "\e[1mANSWER:\e[0m ")" answer
	echo "$question;$answer;2.5;$(date +"%m-%d-%Y");0;0" >> $deck
}

# print informations about the deck
info_deck() {
	echo -e "\e[1mStats for\e[0m $deck\n"

	today=$(date +"%m-%d-%Y")
	tomorrow=$(date -d "now +1 days" +"%m-%d-%Y")
	items=$(grep -c '' $deck)
	sum=0
	due_today=0

	while read item; do
		IFS=';' read -a q <<< "$item"

		efactor="${q[2]}"
		sum="$sum + $efactor"

		date="${q[3]}"
		if [[ $date < $today || $date == $today ]]; then
			due_today=$(echo "$due_today + 1" | bc -l)
		fi
	done < $deck

	# total, due today and due tomorrow
	echo -e "\e[1mTotal cards\e[0m:  $items"
	echo -e "\e[1mDue today\e[0m:    $due_today"
	echo -e "\e[1mDue tomorrow\e[0m: $(cat $deck | grep -c "$tomorrow")\n"

	# e-factor average
	avg=$(echo "($sum)/$items" | bc -l)
	avg=$(printf "%.2f" $avg)
	echo -e "\e[1mAverage E-factor\e[0m: $avg"
}

# argument handling
if [[ $1 == "cram" ]]; then
	deck=$2
	cram_deck
elif [[ $1 == "add" ]]; then
	deck=$2
	add_to_deck
elif [[ $1 == "info" ]]; then
	deck=$2
	info_deck
else
	deck=$1

	# backup the deck just in case
	cp $deck backup_$deck

	study_deck
fi
